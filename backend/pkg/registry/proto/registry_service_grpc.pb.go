// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/registry_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	proto "tls-grpc/pkg/common/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegistryService_RegisterExecutor_FullMethodName   = "/RegistryService/RegisterExecutor"
	RegistryService_UnregisterExecutor_FullMethodName = "/RegistryService/UnregisterExecutor"
	RegistryService_ListExecutors_FullMethodName      = "/RegistryService/ListExecutors"
	RegistryService_SetExecutorStatus_FullMethodName  = "/RegistryService/SetExecutorStatus"
	RegistryService_RemoteExecuteCmd_FullMethodName   = "/RegistryService/RemoteExecuteCmd"
)

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryServiceClient interface {
	RegisterExecutor(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*proto.SimpleResponse, error)
	UnregisterExecutor(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListExecutors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	SetExecutorStatus(ctx context.Context, in *SetExecutorStatusRequest, opts ...grpc.CallOption) (*proto.SimpleResponse, error)
	RemoteExecuteCmd(ctx context.Context, in *RemoteExecuteCmdRequest, opts ...grpc.CallOption) (*RemoteExecuteCmdResponse, error)
}

type registryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryServiceClient(cc grpc.ClientConnInterface) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) RegisterExecutor(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*proto.SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.SimpleResponse)
	err := c.cc.Invoke(ctx, RegistryService_RegisterExecutor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) UnregisterExecutor(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RegistryService_UnregisterExecutor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListExecutors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, RegistryService_ListExecutors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) SetExecutorStatus(ctx context.Context, in *SetExecutorStatusRequest, opts ...grpc.CallOption) (*proto.SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.SimpleResponse)
	err := c.cc.Invoke(ctx, RegistryService_SetExecutorStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) RemoteExecuteCmd(ctx context.Context, in *RemoteExecuteCmdRequest, opts ...grpc.CallOption) (*RemoteExecuteCmdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteExecuteCmdResponse)
	err := c.cc.Invoke(ctx, RegistryService_RemoteExecuteCmd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceServer is the server API for RegistryService service.
// All implementations must embed UnimplementedRegistryServiceServer
// for forward compatibility.
type RegistryServiceServer interface {
	RegisterExecutor(context.Context, *RegisterRequest) (*proto.SimpleResponse, error)
	UnregisterExecutor(context.Context, *UnregisterRequest) (*emptypb.Empty, error)
	ListExecutors(context.Context, *emptypb.Empty) (*ListResponse, error)
	SetExecutorStatus(context.Context, *SetExecutorStatusRequest) (*proto.SimpleResponse, error)
	RemoteExecuteCmd(context.Context, *RemoteExecuteCmdRequest) (*RemoteExecuteCmdResponse, error)
	mustEmbedUnimplementedRegistryServiceServer()
}

// UnimplementedRegistryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegistryServiceServer struct{}

func (UnimplementedRegistryServiceServer) RegisterExecutor(context.Context, *RegisterRequest) (*proto.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExecutor not implemented")
}
func (UnimplementedRegistryServiceServer) UnregisterExecutor(context.Context, *UnregisterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterExecutor not implemented")
}
func (UnimplementedRegistryServiceServer) ListExecutors(context.Context, *emptypb.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutors not implemented")
}
func (UnimplementedRegistryServiceServer) SetExecutorStatus(context.Context, *SetExecutorStatusRequest) (*proto.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExecutorStatus not implemented")
}
func (UnimplementedRegistryServiceServer) RemoteExecuteCmd(context.Context, *RemoteExecuteCmdRequest) (*RemoteExecuteCmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteExecuteCmd not implemented")
}
func (UnimplementedRegistryServiceServer) mustEmbedUnimplementedRegistryServiceServer() {}
func (UnimplementedRegistryServiceServer) testEmbeddedByValue()                         {}

// UnsafeRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServiceServer will
// result in compilation errors.
type UnsafeRegistryServiceServer interface {
	mustEmbedUnimplementedRegistryServiceServer()
}

func RegisterRegistryServiceServer(s grpc.ServiceRegistrar, srv RegistryServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegistryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegistryService_ServiceDesc, srv)
}

func _RegistryService_RegisterExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).RegisterExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_RegisterExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).RegisterExecutor(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_UnregisterExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UnregisterExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_UnregisterExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UnregisterExecutor(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListExecutors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListExecutors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_ListExecutors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListExecutors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_SetExecutorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExecutorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).SetExecutorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_SetExecutorStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).SetExecutorStatus(ctx, req.(*SetExecutorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_RemoteExecuteCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteExecuteCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).RemoteExecuteCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_RemoteExecuteCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).RemoteExecuteCmd(ctx, req.(*RemoteExecuteCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryService_ServiceDesc is the grpc.ServiceDesc for RegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterExecutor",
			Handler:    _RegistryService_RegisterExecutor_Handler,
		},
		{
			MethodName: "UnregisterExecutor",
			Handler:    _RegistryService_UnregisterExecutor_Handler,
		},
		{
			MethodName: "ListExecutors",
			Handler:    _RegistryService_ListExecutors_Handler,
		},
		{
			MethodName: "SetExecutorStatus",
			Handler:    _RegistryService_SetExecutorStatus_Handler,
		},
		{
			MethodName: "RemoteExecuteCmd",
			Handler:    _RegistryService_RemoteExecuteCmd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/registry_service.proto",
}
